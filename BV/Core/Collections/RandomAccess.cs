///////////////////////////////////////////////////////////
//  List.cs
//  Implementation of the Class List
//  Generated by Enterprise Architect
//  Created on:      21-Mar-2010 4:14:04 PM
///////////////////////////////////////////////////////////


using System;
using System.Collections;
using System.Collections.Generic;

namespace VB.Common.Core.Collections
{
    public class RandomAccess<T> : IRandomAccess<T> {

        private const int DefaultCapacity = 4;

        private T[] _items = new T[DefaultCapacity];

        private int _size;

        private int _modificationCount;

        private bool _frozen;

        public void Add(T item)
        {
            if (_frozen)
            {
                throw new InvalidOperationException("Frozen");
            }

            if (_size == _items.Length)
            {
                EnsureCapacity(_size + 1);
            }

            _items[_size++] = item;
        }

        public int Capacity
        {
            get { return _items.Length; }
            set
            {
                if (value != _items.Length)
                {
                    if (value < _size)
                    {
                        throw new ArgumentOutOfRangeException();
                    }
                    if (value > 0)
                    {
                        T[] destinationArray = new T[value];
                        if (_size > 0)
                        {
                            Array.Copy(_items, 0, destinationArray, 0, _size);
                        }
                        _items = destinationArray;
                    }
                    else
                    {
                        _items = new T[0];
                    }
                }
            }
        }

        public int Count
        {
            get { return _size; }
        }

        public RandomAccessIterator<T> Iterator
        {
            get { return new RandomAccessIterator<T>(this); }
        }

        public void Freeze()
        {
            _frozen = true;
        }

        public T this[int index]
        {
            get
            {
                if (index >= _size)
                {
                    throw new ArgumentOutOfRangeException();
                }
                return _items[index];
            }
        }

        protected internal int ModificationCount
        {
            get { return _modificationCount; }
        }
        
        private void EnsureCapacity(int min)
        {
            _modificationCount++;

            if (_items.Length < min)
            {
                int num = (_items.Length == 0) ? DefaultCapacity : (_items.Length * 2);
                if (num < min)
                {
                    num = min;
                }
                Capacity = num;
            }
        }

        #region IEnumerable<T> Members

        IEnumerator<T> IEnumerable<T>.GetEnumerator()
        {
            return Iterator;
        }

        #endregion

        #region IEnumerable Members

        IEnumerator IEnumerable.GetEnumerator()
        {
            return Iterator;
        }

        #endregion
    }
}

//end namespace Model